#!/usr/bin/env bash

##########################
## CPU Governor setting ##
##########################

# Set cpu governor to powersave
function setCpuGovPowersave ()
{
     for i in {0..3};
     do
         sudo cpufreq-set -c $i -g powersave;
     done
}
# Set cpu governor to performance
function setCpuGovPerformance ()
{
     for i in {0..3};
     do
         sudo cpufreq-set -c $i -g performance;
     done
}


#######################################################
## Annoying PageUp PageDown is too close to up/down. ##
## Disable and enable the keys                       ##
#######################################################

function setKeyPageUpDownOff {
	#echo "Disable the annoying PageUp PageDown key..."
	xmodmap -e 'keycode 112 = '
	xmodmap -e 'keycode 117 = '
}

function setKeyPageUpDownOn {
	#echo "Enable the PageUp PageDown key..."
	xmodmap -e 'keycode 112 = Prior NoSymbol Prior'
	xmodmap -e 'keycode 117 = Next NoSymbol Next '
}


################################################################
## switching the proxy settings REALLY GLOBALLY               ##
## changed from https://gist.github.com/fernando-basso/635204 ##
################################################################

# gsettings list-recursively org.gnome.system.proxy

# Change de ip address and port number accordingly.
# for gtk3 programs
function setProxyOn() {
	proxy_server='proxy.kip.uni-heidelberg.de'

	# ' manual / nome / automatic '
	gsettings set org.gnome.system.proxy mode 'manual'

## the proxy server infomation should be loaded automatically as last configuration
#	gsettings set org.gnome.system.proxy.http host ${proxy_server}
#	gsettings set org.gnome.system.proxy.http port 8080
#	gsettings set org.gnome.system.proxy.https host ${proxy_server}
#	gsettings set org.gnome.system.proxy.https port 8080
#	gsettings set org.gnome.system.proxy.ftp host ${proxy_server}
#	gsettings set org.gnome.system.proxy.ftp port 2121
#	gsettings set org.gnome.system.proxy.socks host ${proxy_server}
#	gsettings set org.gnome.system.proxy.socks port 1080

	echo "System wides GTK3 program proxy set to ${proxy_server}."
	unset proxy_server

	## set the proxy for the environment variables
	export http_proxy=http://proxy.kip.uni-heidelberg.de:8080
	export https_proxy=https://proxy.kip.uni-heidelberg.de:8080
	export ftp_proxy=ftp://proxy2.kip.uni-heidelberg.de:2121
	echo "set proxy environment variables."
}

function setProxyOff() {
	# ' manual / nome / automatic '
	gsettings set org.gnome.system.proxy mode 'none'
	echo "system-wides gtk3 program proxy set to 'none'."

	# unset the proxy for the environment variables
	unset http_proxy https_proxy ftp_proxy
	echo "unset proxy environment variables."
}


##########################################################################
## tmux functions to                                                     #
## 1. refresh DISPLAY environment value on current pane                  #
## 2. to excuted command to all the pane                                 #
##                                                                       #
## to update DISPLAY on all the windows/pane:                            #
## 1. make sure every pane are at terminal, not at vim or something else #
## 2. run "tmux_all_pane_exec tmux_refresh_display"                      #
##                                                                       #
## the refreences are lost...                                            #
##########################################################################

if [ -n "$TMUX" ]; then
	function tmux_refresh_display {
		#export $(tmux show-environment | grep "^SSH_AUTH_SOCK")
		export $(tmux show-environment | grep "^DISPLAY")
		echo New DISPLAY =  $DISPLAY
	}

	function tmux_all_pane_exec {

	  # Notate which window/pane we were originally at
	  ORIG_WINDOW_INDEX=`tmux display-message -p '#I'`
	  ORIG_PANE_INDEX=`tmux display-message -p '#P'`

	  # Assign the argument to something readable
	  command=$1

	  # Count how many windows we have
	  windows=$((`tmux list-windows | wc -l` - 1))

	  # Loop through the windows
	  for (( window=0; window <= $windows; window++ )); do
	    tmux select-window -t $window #select the window

	    # Count how many panes there are in the window
	    panes=$((`tmux list-panes| wc -l` - 1))
	    # debugging
	    #echo "window:$window pane:$pane";
	    #sleep 1

	    # Loop through the panes that are in the window
	    for (( pane=0; pane <= $panes; pane++ )); do
	      # Skip the window that the command was ran in, run it in that window last
	      # since we don't want to suspend the script that we are currently running
	      # and also we want to end back where we started..
	      if [ $ORIG_WINDOW_INDEX -eq $window -a $ORIG_PANE_INDEX -eq $pane ]; then
		  continue
	      fi
	      tmux select-pane -t $pane #select the pane
	      # Send the escape key, in the case we are in a vim like program. This is
	      # repeated because the send-key command is not waiting for vim to complete
	      # its action... also sending a sleep 1 command seems to fuck up the loop.
	      for i in {1..25}; do tmux send-keys C-[; done
	      # temp suspend any gui thats running
	      tmux send-keys C-z
	      # if no gui was running, remove the escape sequence we just sent ^Z
	      tmux send-keys C-H
	      # run the command & switch back to the gui if there was any
	      tmux send-keys "$command && fg 2>/dev/null" C-m
	    done
	  done

	  tmux select-window -t $ORIG_WINDOW_INDEX #select the original window
	  tmux select-pane -t $ORIG_PANE_INDEX #select the original pane
	  # Send the escape key, in the case we are in a vim like program. This is
	  # repeated because the send-key command is not waiting for vim to complete
	  # its action... also sending a sleep 1 command seems to fuck up the loop.
	  for i in {1..25}; do tmux send-keys C-[; done
	  # temp suspend any gui thats running
	  # run the command & switch back to the gui if there was any
	  tmux send-keys C-c "$command && fg 2>/dev/null" C-m
	  tmux send-keys "clear" C-m

	}
else
	function tmux_refresh_display {
		echo "Not in TMUX, empty function here!"
	}
	function tmux_all_pane_exec {
		echo "Not in TMUX, empty function here!"
	}
fi

