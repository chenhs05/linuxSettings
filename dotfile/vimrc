if $SHELL =~ 'bin/fish'
set shell=/bin/bash
endif

" vim:foldmethod=marker:foldlevel=0
"
" plugins (Vundle) {{{
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
" Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'altercation/vim-colors-solarized'
Plugin 'majutsushi/tagbar'
" Plugin 'taglist.vim'
Plugin 'drmikehenry/vim-headerguard'

" completion and snips
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
" snippet engine.
Plugin 'SirVer/ultisnips'
" snippets
Plugin 'honza/vim-snippets'

" " completion and snips
"" it's a bit too heavy, sometimes make vim stuck there for garbage collection
" Plugin 'Shougo/vimproc.vim'
" Plugin 'Shougo/neocomplete.vim'
" Plugin 'Shougo/neosnippet.vim'
" Plugin 'Shougo/neosnippet-snippets'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}
" here start my own .vimrc
" some personal basic settings {{{
syntax on
filetype plugin indent on
set laststatus=2
set wildmenu
set autoread
set number
set mouse=a
set cursorline
" highlight CursorLine cterm=NONE ctermbg=grey
set hidden
" backspace act as in the other program
set backspace=2
set hlsearch 
" }}}
"
" folding {{{
syn sync fromstart
set foldmethod=syntax
set foldlevelstart=20
set incsearch
" }}}
"
" solarized {{{
syntax enable
if has('gui_running')
	set background=light
else
	set background=dark
	let g:solarized_termcolors=16
endif
colorscheme solarized
" }}}
"
" function: Enable and disable mouse use {{{
noremap <f12> :call ToggleMouse() <CR>
function! ToggleMouse()
if &mouse == 'a'
set mouse=
set nonumber
echo "Mouse usage disabled"
else
set mouse=a
set number
echo "Mouse usage enabled"
endif
endfunction
" }}}
"
" git commit message {{{
autocmd Filetype gitcommit setlocal spell textwidth=72
" }}}
"
" "fugitive {{{
" set diffopt+=vertical
" " }}}
"
" latex {{{
" IMPORTANT: grep will sometimes skip displaying the file name if you
" " search in a singe file. This will confuse Latex-Suite. Set your grep
" " program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" " 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" " The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" " use latexmk to make the pdf file
" let g:Tex_DefaultTargetFormat = 'pdf'
" " let g:Tex_CompileRule_pdf = 'latexmk -pdf -f $*'
" let g:Tex_CompileRule_pdf = 'latexmk -pdf'
" set iskeyword+=:

" "turn on omnicompletion
" set ofu=syntaxcomplete#Complete

" truncate the length of the line
autocmd Filetype tex setlocal textwidth=80
" autocmd Filetype tex setlocal spell
" }}}
" "
" " neocomplte {{{
" " " add some delay before auto complete
" " let g:neocomplete#enable_cursor_hold_i = 1
" " let g:neocomplete#cursor_hold_i_time = 500 " in msec
" " " disable fuzzy completion, which cause vim to be very slow
" " let g:neocomplete#enable_fuzzy_completion = 0
" " Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" " Use neocomplete.
" let g:neocomplete#enable_at_startup = 1
" " Use smartcase.
" let g:neocomplete#enable_smart_case = 1
" " Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" 
" " Define dictionary.
" let g:neocomplete#sources#dictionary#dictionaries = {
"     \ 'default' : '',
"     \ 'vimshell' : $HOME.'/.vimshell_hist',
"     \ 'scheme' : $HOME.'/.gosh_completions'
"         \ }
" 
" " Define keyword.
" if !exists('g:neocomplete#keyword_patterns')
"     let g:neocomplete#keyword_patterns = {}
" endif
" let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" 
" " Plugin key-mappings.
" inoremap <expr><C-g>     neocomplete#undo_completion()
" inoremap <expr><C-l>     neocomplete#complete_common_string()
" 
" " Recommended key-mappings.
" " <CR>: close popup and save indent.
" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" function! s:my_cr_function()
"   "return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
"   " For no inserting <CR> key.
"   return pumvisible() ? "\<C-y>" : "\<CR>"
" endfunction
" " <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" " <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" " Close popup by <Space>.
" "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
" 
" " AutoComplPop like behavior.
" "let g:neocomplete#enable_auto_select = 1
" 
" " Shell like behavior(not recommended).
" "set completeopt+=longest
" "let g:neocomplete#enable_auto_select = 1
" "let g:neocomplete#disable_auto_complete = 1
" "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
" 
" " Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" 
" " Enable heavy omni completion.
" if !exists('g:neocomplete#sources#omni#input_patterns')
"   let g:neocomplete#sources#omni#input_patterns = {}
" endif
" let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
" let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
" let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
" 
" " For perlomni.vim setting.
" " https://github.com/c9s/perlomni.vim
" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
" " }}}
" "
" " neosnippet {{{
" " Plugin key-mappings.
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)
" 
" " SuperTab like snippets behavior.
" "imap <expr><TAB>
" " \ pumvisible() ? "\<C-n>" :
" " \ neosnippet#expandable_or_jumpable() ?
" " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" 
" " For conceal markers.
" if has('conceal')
"   set conceallevel=2 concealcursor=niv
" endif
" " }}}
" "
" headerguard {{{
function! g:HeaderguardName()
	return "__" . toupper(expand('%:t:gs/[^0-9a-zA-Z_]/_/g'))
endfunction
"}}}
"
" easy-tags {{{
" enable async updates
let g:easytags_async=1
"}}}
"
" tagbar {{{
nmap <F8> :TagbarToggle<CR>
let g:tagbar_left=1
" }}}
"
" YouCompleteMe {{{
" let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_complete_in_comments = 1
let g:ycm_key_list_select_completion = ['<tab>', '<c-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
let g:ycm_confirm_extra_conf = 0

" let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py'
let g:ycm_collect_indentifiers_from_tags_files=1
let g:ycm_seed_identifiers_with_syntax=1
" }}}
"
" UltiSnips{{{
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" }}}
"
