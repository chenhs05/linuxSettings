if $SHELL =~ 'bin/fish'
set shell=/bin/bash
endif

" vim:foldmethod=marker:foldlevel=0
"
" plugins (Vundle) {{{
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'lervag/vimtex'
Plugin 'altercation/vim-colors-solarized'
Plugin 'majutsushi/tagbar'
Plugin 'drmikehenry/vim-headerguard'
Plugin 'parnmatt/vim-root'
Plugin 'ervandew/supertab'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}
" here start my own .vimrc
" some personal basic settings {{{
syntax on
filetype plugin on
filetype indent on
set laststatus=2
set wildmenu
set autoread
set number
set mouse=a
set cursorline
" highlight CursorLine cterm=NONE ctermbg=grey
set hidden
" backspace act as in the other program
set backspace=2
set hlsearch
set incsearch

"use omnicomplete whenever there's no completion engine in youcompleteme (for
"example, in the case of PHP)
set omnifunc=syntaxcomplete#Complete
"personalized status line with more information
set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%r%y(%n)\ %m%=%c,%l/%L\ %P
"}}}

" ingore some filetype{{{
set wildignore+=*.o,*.obj,*.swp
" }}}
"
" VHDL Stuff {{{
au filetype vhdl setlocal foldmethod=marker foldlevel=1 softtabstop=4 tabstop=4 sw=4
au filetype vhd setlocal foldmethod=marker foldlevel=1 softtabstop=4 tabstop=4 sw=4

" }}}
"
" folding {{{
syn sync fromstart
set foldmethod=syntax
set foldlevelstart=20
" }}}
"
" solarized {{{
syntax enable
if has('gui_running')
	set background=light
	"let g:solarized_termcolors=256
else
	let hour = strftime("%H")
	if hour >= 6 && hour <= 18
		set background=light
	else
		set background=dark
	endif
	"let g:solarized_termcolors=256
	"set t_Co=16
endif
colorscheme solarized
" }}}
"
" function: Enable and disable mouse use {{{
noremap <f12> :call ToggleMouse() <CR>
function! ToggleMouse()
if &mouse == 'a'
	set mouse=
	set nonumber
	echo "Mouse usage disabled"
else
	set mouse=a
	set number
	echo "Mouse usage enabled"
endif
endfunction
" }}}
"
" git commit message {{{
autocmd Filetype gitcommit setlocal spell textwidth=72
" }}}
"
" text files {{{
autocmd Filetype text setlocal spell textwidth=72
" }}}
"
"fugitive {{{
set diffopt+=vertical
" }}}

" latex {{{
" Vim will generally autodetect filetypes automatically.  In most cases this
" works as expected, however, in some cases it will detect a file with the `tex`
" suffix as a |plaintex|.  To prevent this, one may set the option
" g:tex_flavor| in ones `vimrc` file, that is:
let g:tex_flavor = 'latex'

" truncate the length of the line
autocmd Filetype tex setlocal textwidth=79
autocmd Filetype tex setlocal spell
autocmd Filetype tex setlocal softtabstop=2 tabstop=2 sw=2

" for vimtex
let g:vimtex_latexmk_continuous = 0
let g:vimtex_latexmk_background = 1
let g:vimtex_view_general_viewer = 'qpdfview'
let g:vimtex_view_general_options = '--unique @pdf\#src:@tex:@line:@col'
let g:vimtex_view_general_options_latexmk = '--unique'

" SuperTab setting to get the \ref{} completing with omnifuc using vimtex
" plugin
autocmd FileType tex
            \ if &omnifunc != '' |
            \   call SuperTabChain(&omnifunc, "<c-n>") |
            \   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
            \ endif
" }}}
"
" headerguard {{{
function! g:HeaderguardName()
	return "__" . toupper(expand('%:t:gs/[^0-9a-zA-Z_]/_/g'))
endfunction
"}}}
"
" easy-tags {{{
" enable async updates
let g:easytags_async=1
"}}}
"
" tagbar {{{
nmap <F8> :TagbarToggle<CR>
let g:tagbar_left=1
" }}}
"
" for vim-airline --{{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 0
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline_powerline_fonts = 0
" --}}}
"
"for vim-markdown --{{{
	let g:vim_markdown_folding_disabled = 1
	let g:vim_markdown_toc_autofit = 1
	let g:tex_conceal = ""
	let g:vim_markdown_math = 1
	let g:vim_markdown_frontmatter = 1
	let g:vim_markdown_no_extensions_in_markdown = 1
"--}}}
"
" To load local vimrc {{{
set exrc
"}}}
"
" For mutt --{{{
au BufRead ~/.tmp/mutt-* set tw=72
"--}}}
"
" For neovim --{{{
if has('nvim')
	tnoremap <Esc> <C-\><C-n>
	set clipboard+=unnamedplus
endif
" --}}}
