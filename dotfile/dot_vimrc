if $SHELL =~ 'bin/fish'
set shell=/bin/bash
endif

" vim:foldmethod=marker:foldlevel=0
"
" plugins (Vundle) {{{
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'altercation/vim-colors-solarized'
Plugin 'majutsushi/tagbar'
Plugin 'drmikehenry/vim-headerguard'
Plugin 'parnmatt/vim-root'
Plugin 'ervandew/supertab'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}
" here start my own .vimrc
" some personal basic settings {{{
syntax on
filetype plugin on
filetype indent on
set laststatus=2
set wildmenu
set autoread
set number
set mouse=a
set cursorline
" highlight CursorLine cterm=NONE ctermbg=grey
set hidden
" backspace act as in the other program
set backspace=2
set hlsearch
set incsearch

"use omnicomplete whenever there's no completion engine in youcompleteme (for
"example, in the case of PHP)
set omnifunc=syntaxcomplete#Complete
set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%r%y(%n)\ %m%=%c,%l/%L\ %P
"}}}

" ingore some filetype{{{
set wildignore+=*.pdf,*.o,*.obj,*.jpg,*.png,*.swp
" }}}
"
" VHDL Stuff {{{
au filetype vhdl setlocal foldmethod=marker foldlevel=1 softtabstop=4 tabstop=4
au filetype vhd setlocal foldmethod=marker foldlevel=1 softtabstop=4 tabstop=4

" "some complicated setting from the internet {{{
" if has("autocmd")
" 	filetype plugin indent on
" "	filetype dependent settings
" 	au Filetype vhdl call FT_vhdl()
" else
" 	set autoindent
" endif
"
" function FT_vhdl()
" 	if exists("+omnifunc")
" 		setlocal omnifunc=syntaxcomplete#Complete
" 	endif
" 	setlocal errorformat=ERROR:%.%#\ -\ \"\%f\"\ Line\ %l.\ %m,%EERROR:%m,%C\[%f(%l)\]:\ %m,%C%m,%Z%m
" 	let g:vhdl_indent_genportmap=0
" "	for taglist
" 	let g:tlist_vhdl_settings   = 'vhdl;d:package declarations;b:package bodies;e:entities;a:architecture specifications;t:type declarations;p:processes;f:functions;m:port maps;r:procedures'
" endfunction
"}}}
" }}}
"
" folding {{{
syn sync fromstart
set foldmethod=syntax
set foldlevelstart=20
" }}}
"
" solarized {{{
syntax enable
if has('gui_running')
	set background=light
	let g:solarized_termcolors=256
else
	set background=dark
	" let g:solarized_termcolors=16
endif
colorscheme solarized
" }}}
"
" function: Enable and disable mouse use {{{
noremap <f12> :call ToggleMouse() <CR>
function! ToggleMouse()
if &mouse == 'a'
set mouse=
set nonumber
echo "Mouse usage disabled"
else
set mouse=a
set number
echo "Mouse usage enabled"
endif
endfunction
" }}}
"
" git commit message {{{
autocmd Filetype gitcommit setlocal spell textwidth=72
" }}}
"
" text files {{{
autocmd Filetype text setlocal spell textwidth=72
" }}}
"
"fugitive {{{
set diffopt+=vertical
" }}}

" latex {{{
" truncate the length of the line
autocmd Filetype tex setlocal textwidth=80
autocmd Filetype tex setlocal spell

" for latex-box
autocmd Filetype tex setlocal smartindent
" autocmd Filetype tex call Ycm_latex_box()
"
" function Ycm_latex_box()
" 	" Add triggers to ycm for LaTeX-Box autocompletion
" 	let g:ycm_semantic_triggers = {
" 	\  'tex'  : ['{'],
" 	\ }
" endfunction
"
" }}}
"
" headerguard {{{
function! g:HeaderguardName()
	return "__" . toupper(expand('%:t:gs/[^0-9a-zA-Z_]/_/g'))
endfunction
"}}}
"
" easy-tags {{{
" enable async updates
let g:easytags_async=1
"}}}
"
" tagbar {{{
nmap <F8> :TagbarToggle<CR>
let g:tagbar_left=1
" }}}
"
