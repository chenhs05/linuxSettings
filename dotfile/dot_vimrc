if $SHELL =~ 'bin/fish'
set shell=/bin/bash
endif

" vim:foldmethod=marker:foldlevel=0
"
" plugins (Vundle) {{{
" install Vundle by :
"   git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'xuyuanp/nerdtree-git-plugin'
Plugin 'airblade/vim-gitgutter'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'lervag/vimtex'
Plugin 'majutsushi/tagbar'
" Plugin 'ervandew/supertab'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'cespare/vim-toml'
Plugin 'scrooloose/nerdcommenter'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" "" snips and auto complete
" neocomplete
Plugin 'shougo/deoplete.nvim'

" color schemes
" solarized
Plugin 'altercation/vim-colors-solarized'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}
" here start my own .vimrc
" some personal basic settings {{{
syntax on
filetype plugin on
filetype indent on
set laststatus=2
set wildmenu
set autoread
set number
set mouse=a
set cursorline
" highlight CursorLine cterm=NONE ctermbg=grey
set hidden
" backspace act as in the other program
set backspace=2
set hlsearch
set incsearch

"use omnicomplete whenever there's no completion engine in youcompleteme (for
"example, in the case of PHP)
set omnifunc=syntaxcomplete#Complete
"personalized status line with more information
set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%r%y(%n)\ %m%=%c,%l/%L\ %P

" insert date and time
nnoremap <F3> "=strftime("%Y-%m-%d, %a")<CR>p
inoremap <F3> <C-R>=strftime("%Y-%m-%d, %a")<CR>

" PageUp PageDown keys
map <silent> <PageUp> <C-U>
map <silent> <PageDown> <C-D>
imap <silent> <PageUp> <C-O><C-U>
imap <silent> <PageDown> <C-O><C-D>
"}}}

" ingore some filetype{{{
set wildignore+=*.o,*.obj,*.swp
" }}}
"
" VHDL Stuff {{{
" au filetype vhdl setlocal foldmethod=marker foldlevel=1 softtabstop=4 tabstop=4 sw=4
" au filetype vhd setlocal foldmethod=marker foldlevel=1 softtabstop=4 tabstop=4 sw=4
au filetype vhdl setlocal foldmethod=marker foldlevel=1
au filetype vhd setlocal foldmethod=marker foldlevel=1
" }}}
"
" folding {{{
syn sync fromstart
set foldmethod=syntax
set foldlevelstart=20
" }}}
"
" colorschemes{{{
syntax enable
if has('gui_running')
	set background=light
	"let g:solarized_termcolors=256
else
"	let hour = strftime("%H")
"	if hour >= 6 && hour <= 20
"		set background=light
"	else
"		set background=dark
"	endif
	set background=light
	let g:solarized_termcolors=256
	"set t_Co=16
endif
colorscheme solarized
" }}}
"
" function: Enable and disable mouse use {{{
noremap <f12> :call ToggleMouse() <CR>
function! ToggleMouse()
if &mouse == 'a'
	set mouse=
	set nonumber
	echo "Mouse usage disabled"
else
	set mouse=a
	set number
	echo "Mouse usage enabled"
endif
endfunction
" }}}
"
" git commit message {{{
autocmd Filetype gitcommit setlocal spell textwidth=72
" }}}
"
" formatting markdown {{{
autocmd Filetype markdown setlocal spell textwidth=79
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_toc_autofit = 1

" "" function for highlighting for markdwon liquid and mathjax {{{
" "" http://stsievert.com/blog/2016/01/06/vim-jekyll-mathjax/
" function! MathAndLiquid()
"     "" Define certain regions
"     " Block math. Look for "$$[anything]$$"
"     syn region math start=/\$\$/ end=/\$\$/
"     " inline math. Look for "$[not $][anything]$"
"     syn match math_block '\$[^$].\{-}\$'
" 
"     " Liquid single line. Look for "{%[anything]%}"
"     syn match liquid '{%.*%}'
"     " Liquid multiline. Look for "{%[anything]%}[anything]{%[anything]%}"
"     syn region highlight_block start='{% highlight .*%}' end='{%.*%}'
"     " Fenced code blocks, used in GitHub Flavored Markdown (GFM)
"     syn region highlight_block start='```' end='```'
" 
"     "" Actually highlight those regions.
"     hi link math Statement
"     hi link liquid Statement
"     hi link highlight_block Function
"     hi link math_block Function
" endfunction
" 
" " Call everytime we open a Markdown file
" autocmd BufRead,BufNewFile,BufEnter *.md,*.markdown call MathAndLiquid()
" }}}
" }}}
"
" text files {{{
autocmd Filetype text setlocal spell textwidth=79
" }}}
"
"fugitive {{{
set diffopt+=vertical
" }}}
"
"  deoplete{{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 10
" Use smartcase.
let g:deoplete#enable_smart_case = 1
" use head matching but not fuzzy matching 
call deoplete#custom#source('_', 'matchers', ['matcher_head'])

"use tab for auto completion
let g:deoplete#disable_auto_complete = 1
inoremap <silent><expr> <TAB>
\ pumvisible() ? "\<C-n>" :
\ <SID>check_back_space() ? "\<TAB>" :
\ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~ '\s'
endfunction "}}}
" }}}
"
" latex {{{
" Vim will generally autodetect filetypes automatically.  In most cases this
" works as expected, however, in some cases it will detect a file with the `tex`
" suffix as a |plaintex|.  To prevent this, one may set the option
" g:tex_flavor| in ones `vimrc` file, that is:
let g:tex_flavor = 'latex'

" truncate the length of the line
autocmd Filetype tex setlocal textwidth=79
autocmd Filetype tex setlocal spell
autocmd Filetype tex setlocal softtabstop=2 tabstop=2 sw=2

" for vimtex
let g:vimtex_view_general_viewer = 'qpdfview'
let g:vimtex_view_general_options = '--unique @pdf\#src:@tex:@line:@col'
let g:vimtex_view_general_options_latexmk = '--unique'
let g:vimtex_compiler_latexmk = {
        \ 'backend' : 'nvim',
        \ 'background' : 1,
        \ 'build_dir' : '',
        \ 'callback' : 1,
        \ 'continuous' : 0,
        \ 'executable' : 'latexmk',
        \ 'options' : [
        \   '-pdf',
        \   '-verbose',
        \   '-file-line-error',
        \   '-synctex=1',
        \   '-interaction=nonstopmode',
        \ ],
        \}
"" about folding with vimtex
let g:vimtex_fold_enabled = 1
" set fillchars="vert:|,fold:\"
"" close the brace after completion
let g:vimtex_complete_close_braces = 0
"" set the width of the index window
let g:vimtex_index_split_width = 50
"" not open quickfix windwow when there is only warning
let g:vimtex_quickfix_open_on_warning = 0

" temporaty fix for showing log with neovim
let g:vimtex_quickfix_latexlog = {'fix_paths':0}


if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
endif
let g:deoplete#omni#input_patterns.tex = g:vimtex#re#deoplete


" " SuperTab setting to get the \ref{} completing with omnifuc using vimtex
" " plugin
" autocmd FileType tex
"             \ if &omnifunc != '' |
"             \   call SuperTabChain(&omnifunc, "<c-n>") |
"             \   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
"             \ endif
" }}}
"
" easy-tags {{{
" enable async updates
let g:easytags_async=1
"}}}
"
" tagbar {{{
nmap <F8> :TagbarToggle<CR>
let g:tagbar_left=1
" }}}
"
" for vim-airline --{{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 0
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#exclude_preview = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline_powerline_fonts = 0
" --}}}
"
" for nerdcommenter {{{

" }}}
"
" To load local vimrc {{{
set exrc
"}}}
"
" For mutt --{{{
au BufRead ~/.tmp/mutt-* set tw=72
"--}}}
"
" For neovim --{{{
if has('nvim')
	tnoremap <Esc> <C-\><C-n>
	set clipboard+=unnamedplus
endif
" --}}}
